openapi: 3.0.3

info:
  title: Job Management API
  version: v2

servers:
  - url: /v2/job_management

tags:
  - name: Job methods
    description: Methods for managing jobs

  - name: Job
    description: <SchemaDefinition schemaRef="#/components/schemas/job"/>

  - name: Job Priority
    description: <SchemaDefinition schemaRef="#/components/schemas/job_priority"/> 

  - name: Job Status
    description: <SchemaDefinition schemaRef="#/components/schemas/job_status"/>

x-tagGroups:
  - name: Methods
    tags:
      - Job methods

  - name: Schemas
    tags:
      - Job
      - Job Priority
      - Job Status

security:
  - access_token: []

paths:
  /jobs:
    get:
      summary: Get all jobs
      operationId: get_job_list
      tags:
        - Job methods
      responses:
        "200":
          $ref: "#/components/responses/job_list_ok"
        "500":
          $ref: "#/components/responses/response_internal_server_error"

    post:
      summary: Create a job
      operationId: create_job
      tags:
        - Job methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/job"
      responses:
        "200":
          $ref: "#/components/responses/job_ok"
        "400":
          $ref: "#/components/responses/response_bad_request"
        "500":
          $ref: "#/components/responses/response_internal_server_error"

  /jobs/{id}:
    get:
      summary: Get job by ID
      operationId: get_job
      tags:
        - Job methods
      parameters:
        - $ref: "#/components/parameters/job_id"
      responses:
        "200":
          $ref: "#/components/responses/job_ok"
        "404":
          $ref: "#/components/responses/response_not_found"
        "500":
          $ref: "#/components/responses/response_internal_server_error"

  /jobs/{id}/priority:
    put:
      summary: Update job priority by ID
      operationId: update_job_priority
      tags:
        - Job methods
      parameters:
        - $ref: "#/components/parameters/job_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/job_priority"
      responses:
        "200":
          $ref: "#/components/responses/job_priority_ok"
        "400":
          $ref: "#/components/responses/response_bad_request"
        "404":
          $ref: "#/components/responses/response_not_found"
        "500":
          $ref: "#/components/responses/response_internal_server_error"

  /jobs/{id}/status:
    get:
      summary: Get job status by ID
      operationId: get_job_status
      tags:
        - Job methods
      parameters:
        - $ref: "#/components/parameters/job_id"
      responses:
        "200":
          $ref: "#/components/responses/job_status_ok"
        "404":
          $ref: "#/components/responses/response_not_found"
        "500":
          $ref: "#/components/responses/response_internal_server_error"

    put:
      summary: Update job status by ID
      operationId: update_job_status
      tags:
        - Job methods
      parameters:
        - $ref: "#/components/parameters/job_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/job_status"
      responses:
        "200":
          $ref: "#/components/responses/job_status_ok"
        "400":
          $ref: "#/components/responses/response_bad_request"
        "404":
          $ref: "#/components/responses/response_not_found"
        "500":
          $ref: "#/components/responses/response_internal_server_error"

components:
  securitySchemes:
    access_token:
      type: apiKey
      in: header
      name: Authorization

  parameters:
    job_id:
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/job_id"
      x-go-name: JobID

  responses:
    response_ok:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/base_response"
          example:
            message: "OK"
      x-go-name: ResponseOK

    response_conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/base_response"
          example:
            message: "Conflict"

    response_internal_server_error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/base_response"
          example:
            message: "Internal Server Error"

    response_not_found:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/base_response"
          example:
            message: "Not Found"

    response_bad_request:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/base_response"
          example:
            message: "Bad Request"

    job_ok:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/base_response"
              - properties:
                  data:
                    $ref: "#/components/schemas/job"
      x-go-name: JobOK

    job_list_ok:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/base_response"
              - properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/job"
      x-go-name: JobListOK

    job_status_ok:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/base_response"
              - properties:
                  data:
                    $ref: "#/components/schemas/job_status"
      x-go-name: JobStatusOK

    job_priority_ok:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/base_response"
              - properties:
                  data:
                    $ref: "#/components/schemas/job_priority"
      x-go-name: JobPriorityOK

  schemas:
    base_response: # Every response should inherit from BaseResponse
      properties:
        message:
          description: message returned by server side if there is any
          type: string

    job_id:
      readOnly: true
      type: integer
      format: int64
      x-go-name: JobID

    job:
      required:
        - source_id
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/job_id"
          x-go-name: ID
        source_id:
          type: string
          description: job source ID to identify where the job comes from
          example: "local-storage"
        priority:
          $ref: "#/components/schemas/job_priority"
        status:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/job_status"

    job_priority:
      type: string
      description: |-
        > NOTE:
        > 
        > Priority in job management is simply an expectation for the job owner, i.e. the services that runs each job.
        > 
        > Job owner might not respect this expectation, which means it can completely ignore this expectation.

        - `high`: if any job is high priority, all medium and low priority jobs will be notified to be paused
        - `medium`: if any job is medium priority, all low priority jobs will be notified to be paused
        - `low`: runs only when no 
      enum:
        - high
        - medium
        - low
      default: medium

    job_status:
      required:
        - status
      properties:
        status:
          type: string
          description: job status
          enum:
            - running
            - completed
            - failed
        message:
          type: string
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 62
